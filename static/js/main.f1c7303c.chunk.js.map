{"version":3,"sources":["api/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["loadData","url","a","fetch","promise","json","storeData","store","data","anime","anime_films","serials","films","url_api","Topic","props","id","useParams","useState","undefined","setData","useEffect","then","res","results","console","log","document","title","title_orig","className","year","src","link","width","height","data-language","data-kinopoisk","kinopoisk_id","href","view","searchData","setSearch","type","onKeyDown","event","value","target","aria-label","placeholder","aria-describedby","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oTAAaA,EAAQ,uCAAG,WAAgBC,GAAhB,eAAAC,EAAA,sEACFC,MAAMF,GADJ,cAClBG,EADkB,gBAETA,EAAQC,OAFC,mFAAH,sD,QCEfC,EAAYC,YAAM,CACpBC,KAAK,CACJC,MAAM,GACNC,YAAY,GACZC,QAAQ,GACRC,MAAM,IAEPC,QAAQ,wBCAZ,SAASC,EAAMC,GAAQ,IACfC,EAAOC,cAAPD,GADc,EAEIE,wBAASC,GAFb,mBAEbX,EAFa,KAEPY,EAFO,KASpB,OANAC,qBAAU,WACRD,EAAQ,WACRpB,EAAS,GAAD,OAAIM,EAAUO,QAAd,6DAA0EG,IAAMM,MAAK,SAACC,GAC5FH,EAAQG,EAAIC,QAAQ,SAEtB,SACWL,IAATX,GACFiB,QAAQC,IAAIlB,GACZmB,SAASC,MAAT,UAAoBpB,EAAKoB,MAAzB,cAAoCpB,EAAKqB,YAEzC,yBAAKC,UAAU,SACb,yBAAKA,UAAU,gBAAgBtB,EAAKoB,MAApC,MAA8CpB,EAAKqB,YACnD,yBAAKC,UAAU,eAAf,6DAA2CtB,EAAKuB,MAChD,yBAAKD,UAAU,iBACb,4BAAQE,IAAKxB,EAAKyB,KAAMC,MAAM,QAAQC,OAAO,WAE/C,yBAAKnB,GAAG,SAASoB,gBAAc,KAAKC,iBAAgB7B,EAAK8B,kBAI3DX,SAASC,MAAQ,2GAEjB,6BACA,wIACA,uBAAGW,KAAK,KAAR,+FAAgC,6BAChC,uBAAGA,KAAK,UAAR,0CA6CWC,mBAzCf,WAAiB,IAAD,EACmBtB,wBAASC,GAD5B,mBACLsB,EADK,KACMC,EADN,KAQZ,OACE,6BACE,yBAAKZ,UAAU,UACf,yBAAKA,UAAU,oBACb,2BACEa,KAAK,OACLb,UAAU,eAEVc,UAAW,SAAAC,GAdnB,IAAgBC,IAeCD,EAAME,OAAOD,MAd5B9C,EAAS,GAAD,OAAIM,EAAUO,QAAd,gEAA6EiC,EAA7E,cAA+FxB,MAAK,SAACC,GAC3GmB,EAAUnB,GACVE,QAAQC,IAAIe,MAaNhB,QAAQC,IAAImB,EAAME,OAAOD,QAE3BE,aAAW,UACXC,YAAY,oCACZC,mBAAiB,gCAOrB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,UAAZ,SACA,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAACrC,EAAD,CAAO6B,KAAK,WAEd,kBAAC,IAAD,CAAOS,OAAK,EAACD,KAAK,KAChB,kIChEQE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjC,SAASkC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.f1c7303c.chunk.js","sourcesContent":["export const loadData = async function (url) {\r\n  let promise = await fetch(url);\r\n  return await promise.json();\r\n}\r\n","import { store } from 'react-easy-state';\r\n\r\nconst storeData = store({\r\n    data:{\r\n     anime:[],\r\n     anime_films:[],\r\n     serials:[],\r\n     films:[]\r\n    },\r\n    url_api:'http://kodikapi.com'\r\n});\r\nexport { storeData };","import React, { useEffect, useState } from 'react';\nimport { BrowserRouter, Route, useParams } from 'react-router-dom';\nimport './App.css';\nimport 'bootstrap-css';\nimport { view } from '@risingstack/react-easy-state';\nimport { loadData } from './api/index';\nimport { storeData } from './store';\n\n\nfunction Topic(props) {\n  let { id } = useParams();\n  const [data, setData] = useState(undefined);\n  useEffect(() => {\n    setData('Loading');\n    loadData(`${storeData.url_api}/search?token=f7b25ff80689999962b926c342b59f0b&id=${id}`).then((res) => {\n      setData(res.results[0]);\n    });\n  },[]);\n  if (data !== undefined) {\n    console.log(data);\n    document.title = `${data.title} / ${data.title_orig}`;\n    return(\n    <div className=\"watch\">\n      <div className=\"watch__title\">{data.title} / {data.title_orig}</div>\n      <div className=\"watch__year\"> Год Выхода: {data.year}</div>\n      <div className=\"watch__iframe\">\n        <iframe src={data.link} width=\"700px\" height=\"400px\"/>\n      </div>\n      <div id=\"yohoho\" data-language=\"en\" data-kinopoisk={data.kinopoisk_id}></div>\n    </div>\n    );\n  } else {\n    document.title = 'Страница не найдена';\n    return (\n    <div>\n    <h2>Страница не найдена</h2>\n    <a href=\"/\">Главная Страница</a><br/>\n    <a href=\"/view/\">Список</a>\n    </div>);\n  }\n}\nfunction App()  {\n    const [searchData,setSearch] = useState(undefined);\n    function search(value){\n      loadData(`${storeData.url_api}/search?token=f7b25ff80689999962b926c342b59f0b&title=${value}&limit=10`).then((res) => {\n        setSearch(res);\n        console.log(searchData);\n      });\n    }\n    return (\n      <div>\n        <div className=\"search\">\n        <div className='input-group mb-3'>\n          <input\n            type='text'\n            className='form-control'\n            \n            onKeyDown={event => {\n              search(event.target.value);\n              console.log(event.target.value);\n            }}\n            aria-label='Default'\n            placeholder='Поиск...'\n            aria-describedby='inputGroup-sizing-default'\n          />\n          </div>\n          {/* {searchData.results !== undefined && typeof searchData.results === 'object' &&\n           1\n          } */}\n        </div>\n        <BrowserRouter>\n          <Route path='/about'>about</Route>\n          <Route path='/view/:id'>\n            <Topic type='anime' />\n          </Route>\n          <Route exact path='/'>\n            <div>Главная Страница</div>\n          </Route>\n        </BrowserRouter>\n      </div>\n    );\n}\nexport default view(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}